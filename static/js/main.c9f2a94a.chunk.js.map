{"version":3,"sources":["counterContext.ts","components/flashcard/flashcard.component.tsx","components/spinner/spinner.component.tsx","components/flashcard-list/flashcard-list.component.tsx","utils.ts","App.tsx","index.tsx"],"names":["CounterContext","createContext","FlashCard","flashcard","useState","flip","setFlip","height","setHeight","handleAnswer","useContext","frontRef","useRef","backRef","cardRef","document","createElement","calculateMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","useEffect","resizeTimeOut","setTimeout","clearTimeout","window","addEventListener","removeEventListener","className","style","onClick","ref","question","options","map","option","index","data-value","key","e","event","currentTarget","getAttribute","answer","backgroundColor","id","Spinner","container","hidden","opacity","scale","visible","transition","delay","when","staggerChildren","item","FlashcardList","flashcards","length","ul","initial","animate","variants","div","elem","decodeString","str","textArea","innerHTML","value","App","setFlashcards","error","setError","isLoading","setIsLoading","categories","setCategories","categoryRef","amountRef","counter","setCounter","Set","ids","setIds","axios","get","then","res","data","trivia_categories","results","correct_answer","incorrect_answers","a","Date","now","sort","random","catch","onSubmit","preventDefault","params","amount","category","handleSubmit","htmlFor","name","disabled","type","min","step","defaultValue","Provider","isRight","has","add","prevState","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c9f2a94a.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\n\r\n\r\nexport const CounterContext = createContext<any>(null)","import React, { useState, useEffect, useRef, useContext } from \"react\";\r\n\r\nimport { CounterContext } from \"../../counterContext\";\r\n\r\ninterface Flashcard {\r\n  id: number;\r\n  question: string;\r\n  answer: string;\r\n  options: string[];\r\n}\r\n\r\nconst FlashCard: React.FC<{ flashcard: Flashcard }> = ({ flashcard }) => {\r\n  const [flip, setFlip] = useState(false);\r\n  const [height, setHeight] = useState(0);\r\n  const { handleAnswer } = useContext(CounterContext);\r\n\r\n  // Keeps track of the element's height\r\n  const MIN_HEIGHT = 100\r\n  const frontRef = useRef<HTMLDivElement>(null);\r\n  const backRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Keeps track of parent element to style\r\n  const cardRef = useRef<HTMLDivElement>(document.createElement(\"div\"));\r\n\r\n  const calculateMaxHeight = () => {\r\n    const frontHeight: number =\r\n      frontRef.current?.getBoundingClientRect().height || 0;\r\n    const backHeight: number =\r\n      frontRef.current?.getBoundingClientRect().height || 0;\r\n    setHeight(Math.max(frontHeight, backHeight, MIN_HEIGHT));\r\n  };\r\n\r\n  // Resizes component\r\n  useEffect(() => {\r\n    const resizeTimeOut = setTimeout(() => {\r\n      calculateMaxHeight();\r\n    }, 1500); \r\n    return () => clearTimeout(resizeTimeOut)\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", calculateMaxHeight);\r\n    return () => window.removeEventListener(\"resize\", calculateMaxHeight);\r\n  }, []);\r\n\r\n  // Styles parent element based on the option user selected\r\n  const tryOption = (event: React.MouseEvent) => {\r\n    setFlip(!flip);\r\n    if (event.currentTarget.getAttribute(\"data-value\") === flashcard.answer) {\r\n      cardRef.current.style.backgroundColor = \"green\";\r\n      handleAnswer(true, flashcard.id);\r\n    } else {\r\n      cardRef.current.style.backgroundColor = \"red\";\r\n      handleAnswer(false, flashcard.id);\r\n    }\r\n    setTimeout(() => {\r\n      cardRef.current.style.backgroundColor = \"grey\";\r\n    }, 1000);\r\n  };\r\n\r\n  // Card flip is done by custom css class animation \"flip\"\r\n  return (\r\n    <div\r\n      className={`card ${flip ? \"flip\" : \"\"}`}\r\n      style={{ height: `${height > MIN_HEIGHT ? `${height}px` : `${MIN_HEIGHT}px`}` }}\r\n      onClick={() => setFlip(!flip)}\r\n      ref={cardRef}\r\n    >\r\n      <div className=\"front\" ref={frontRef}>\r\n        <div className=\"question-title\">\r\n          <h4>{flashcard.question}</h4>\r\n        </div>\r\n        <div className=\"options\">\r\n          {flashcard.options.map((option, index) => {\r\n            return (\r\n              <button\r\n                data-value={option}\r\n                className=\"option\"\r\n                key={index}\r\n                onClick={(e) => tryOption(e)}\r\n              >\r\n                {option}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className=\"back\" ref={backRef}>\r\n        {flashcard.answer}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlashCard;\r\n","import React from \"react\";\r\n\r\nimport \"./spinner.styles.css\";\r\n\r\nconst Spinner:React.FC = () => (<span className=\"spinner\"/>)\r\n\r\nexport default Spinner","import React from \"react\";\r\nimport FlashCard from \"../flashcard/flashcard.component\";\r\nimport Spinner from \"../spinner/spinner.component\";\r\n\r\nimport { motion } from \"framer-motion\";\r\n\r\ninterface Flashcard {\r\n  id: number;\r\n  question: string;\r\n  answer: string;\r\n  options: string[];\r\n}\r\n\r\ninterface Props {\r\n  flashcards: Flashcard[];\r\n}\r\n\r\n// Grid framer-motion animation props\r\nconst container = {\r\n  hidden: { opacity: 1, scale: 0 },\r\n  visible: {\r\n    opacity: 1,\r\n    scale: 1,\r\n    transition: {\r\n      delay: 0.3,\r\n      when: \"beforeChildren\",\r\n      staggerChildren: 0.1,\r\n    },\r\n  },\r\n};\r\n\r\n// Grid item framer-motion animation props\r\nconst item = {\r\n  hidden: { opacity: 0 },\r\n  visible: {\r\n    opacity: 1,\r\n  },\r\n};\r\n\r\nconst FlashcardList: React.FC<Props> = ({ flashcards }) => {\r\n  return (\r\n    <div>\r\n      {flashcards && flashcards.length ? (\r\n        <motion.ul initial=\"hidden\" animate=\"visible\" variants={container}>\r\n          <div className=\"card-grid\">\r\n            {flashcards.map((flashcard) => {\r\n              return (\r\n                <motion.div variants={item} key={flashcard.id}>\r\n                  <FlashCard flashcard={flashcard} />\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </div>\r\n        </motion.ul>\r\n      ) : (\r\n        <div className=\"card-grid\">\r\n          {[1, 2, 3, 4].map((elem, index) => {\r\n            return (\r\n              <motion.div key={index} variants={item} className=\"card\">\r\n                <Spinner />\r\n              </motion.div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FlashcardList;\r\n","// Decodes HTML entities such as #&quot\r\nexport const decodeString = (str: string) => {\r\n  const textArea: HTMLTextAreaElement = document.createElement(\"textarea\");\r\n  textArea.innerHTML = str;\r\n  return textArea.value;\r\n};","import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\nimport FlashcardList from \"./components/flashcard-list/flashcard-list.component\";\nimport { CounterContext } from \"./counterContext\";\nimport { decodeString } from \"./utils\";\n\nimport \"./App.css\";\n\ninterface APIResponse {\n  question: string;\n  correct_answer: string;\n  incorrect_answers: string[];\n}\n\ninterface Category {\n  id: string;\n  name: string;\n}\n\nconst App: React.FC = () => {\n  const [flashcards, setFlashcards] = useState([]);\n  const [error, setError] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const categoryRef = useRef<HTMLSelectElement>(null);\n  const amountRef = useRef<HTMLInputElement>(null);\n\n  // Keeps track of counter state\n  const [counter, setCounter] = useState<number>(0);\n  const [ids, setIds] = useState(new Set());\n  const handleAnswer = (isRight: boolean, id: number) => {\n    if (ids.has(id)) return;\n    setIds(ids.add(id));\n    isRight\n      ? setCounter((prevState) => ++prevState)\n      : setCounter((prevState) => --prevState);\n  };\n\n  // Fetches and provides categories for select input\n  useEffect(() => {\n    axios.get(\"https://opentdb.com/api_category.php\").then((res) => {\n      setCategories(res.data.trivia_categories);\n      setIsLoading(false);\n    });\n  }, []);\n\n  // Fetches initial quizz questions\n  useEffect(() => {\n    axios\n      .get(\"https://opentdb.com/api.php?amount=10\")\n      .then((res) => {\n        setFlashcards(\n          res.data.results.map((item: APIResponse, index: number) => {\n            const answer = decodeString(item.correct_answer);\n            const options = [\n              ...item.incorrect_answers.map((a: string) => decodeString(a)),\n              answer,\n            ];\n            return {\n              id: `${index}-${Date.now()}`,\n              question: decodeString(item.question),\n              answer: decodeString(answer),\n              options: options.sort(() => Math.random() - 0.5),\n            };\n          })\n        );\n      })\n      .catch(() =>\n        setError(\"Sorry, the API is not responding right now, try again later.\")\n      );\n  }, []);\n\n  // Fetches custom quizz questions based on the users input\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    axios\n      .get(\"https://opentdb.com/api.php?amount=10\", {\n        params: {\n          amount: amountRef.current?.value,\n          category: categoryRef.current?.value,\n        },\n      })\n      .then((res) => {\n        setFlashcards(\n          res.data.results.map((item: APIResponse, index: number) => {\n            const answer = decodeString(item.correct_answer);\n            const options = [\n              ...item.incorrect_answers.map((a: string) => decodeString(a)),\n              answer,\n            ];\n            return {\n              id: `${index}-${Date.now()}`,\n              question: decodeString(item.question),\n              answer: decodeString(answer),\n              options: options.sort(() => Math.random() - 0.5),\n            };\n          })\n        );\n      });\n  };\n\n  return (\n    <>\n      <form className=\"header\" onSubmit={(event) => handleSubmit(event)}>\n        <div className=\"form-group\">\n          <label htmlFor=\"category\">Category</label>\n          <select name=\"category\" id=\"category\" ref={categoryRef}>\n            {categories.length ? (\n              categories.map((category) => (\n                <option value={category.id} key={category.id}>\n                  {category.name}\n                </option>\n              ))\n            ) : (\n              <option>Loading...</option>\n            )}\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"amount\">Number of Questions</label>\n          <input\n            disabled={isLoading}\n            type=\"number\"\n            id=\"amount\"\n            min=\"1\"\n            step=\"1\"\n            defaultValue={10}\n            ref={amountRef}\n          />\n        </div>\n        <div className=\"form-group\">\n          <button\n            disabled={isLoading}\n            className={`btn ${isLoading ? \"disabled\" : \"\"}`}\n            type=\"submit\"\n          >\n            {isLoading ? \"Loading...\" : \"Generate\"}\n          </button>\n        </div>\n        <div className=\"form-group\">\n        <h2 className=\"counter-msg\">Score: {counter}</h2>\n        </div>\n      </form>\n      <div className=\"container\">\n        {error && <p className=\"error-msg\">{error}</p>}\n        <CounterContext.Provider value={{ counter, handleAnswer }}>\n          <FlashcardList flashcards={flashcards} />\n        </CounterContext.Provider>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}